{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","this","list","goods","visibleGoods","console","log","sort","first","second","localeCompare","length","reverse","getReorderedGoods","className","type","onClick","setState","NONE","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wFAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA+CE,IAAME,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,SAAU,GAHd,4CAME,WAAU,IAAD,OACP,EAAiCC,KAAKH,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SACdE,EA3CH,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNK,EAAY,YAAOD,GAMzB,OAFAE,QAAQC,IAAIN,EAAUD,GAEdC,GACN,KAAK,EACHI,EAAaG,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAME,cAAcD,MACzD,MACF,KAAK,EACHL,EAAaG,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAMG,OAASF,EAAOE,UAU/D,OAJIZ,GACFK,EAAaQ,UAGRR,EAiBQS,CAAkBjB,EAAiB,CAAEI,WAAUD,eAE5D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAU,0BACVE,QAAS,kBAAM,EAAKC,SAAS,CAAEjB,SAAU,KAH3C,iCAQA,wBACEe,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAM,EAAKC,SAAS,CAAEjB,SAAU,KAH3C,4BAQA,wBACEe,KAAK,SACLD,UAAU,6BACVE,QAAS,kBAAM,EAAKC,SAAS,CAAElB,YAAaA,KAH9C,sBAQEA,GAAcC,IAAaL,EAASuB,OACpC,wBACEH,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAAM,EAAKC,SAAS,CAAEjB,SAAU,EAAGD,YAAY,KAH1D,sBAUJ,6BACGG,EAAKiB,KAAI,SAAAC,GAAI,OACZ,6BACGA,gBAnDf,GAAyBC,IAAMC,WC9D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0046b290.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n// import { render } from 'react-dom';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  switch (sortType) {\n    case 1:\n      visibleGoods.sort((first, second) => first.localeCompare(second));\n      break;\n    case 2:\n      visibleGoods.sort((first, second) => first.length - second.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: 0,\n  };\n\n  render() {\n    const { isReversed, sortType } = this.state;\n    const list = getReorderedGoods(goodsFromServer, { sortType, isReversed });\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"button is-info is-light\"\n            onClick={() => this.setState({ sortType: 1 })}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button is-success is-light\"\n            onClick={() => this.setState({ sortType: 2 })}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button is-warning is-light\"\n            onClick={() => this.setState({ isReversed: !isReversed })}\n          >\n            Reverse\n          </button>\n\n          {(isReversed || sortType !== SortType.NONE) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={() => this.setState({ sortType: 0, isReversed: false })}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          {list.map(good => (\n            <li>\n              {good}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}